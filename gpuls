#!/bin/bash

set -e

GPULS_PY_PATH=/dhi_work/pub/bin/gpuls.py
NODENAME=lambda-server

show_help() {
    cat <<EOF
    gpuls v0.2.0

    Usage: ${0##*/} -x X_MATRIX -y Y_VECTOR [-e E_MATRIX] [FLAGS] -o OUTPUT

    Compute the GPU least squares solution for the regression y ~ X, where y is
    a continuous phenotype and X is a (potentially large) matrix.

    -x  X_MATRIX        Path to the X matrix. Valid formats are .txt, where
                        samples are in the rows, .RData/.Rdata where it is
                        stored as a matrix or as the only element in a named
                        list, or in .h5 where it is the only data element.
    -y  Y_MATRIX        Path to the Y matrix. Valid formats are .txt, where
                        samples are in the rows, .RData/.Rdata where it is
                        stored as a vector or as the only element in a named
                        list, or in .h5 where it is the only data element.
   [-e  E_MATRIX]       Optional: a path to the matrix containing Q
                        environmental factors coded as a 0/1 or continuous
                        matrix.
   [-g]                 Optional: if switched, will run SLOWLY but will return
                        the pvalues of significance tests for individual
                        coefficients in the output key "t_p_values"
   [-k]                 Optional: if switched, will not delete the temporary
                        files (A and b) generated.
   [-n]                 Optional: if switched, will include a G x E interaction
                        term in the model, for a total of (Q + 1) * P terms.
   [-t]                 Optional: if switched, will include the E term in the
                        model.
   [-i]                 Optional: if switched, will include an intercept term
                        in the regression model.
   [-q]                 Optional: if switched, quantile normalize the genotype
                        term.
   [-r]                 Optional: if switched, quantile normalize the environment
                        term.
   [-s]                 Optional: if switched, quantile normalize the GxE
                        interaction term.
   [-p]                 Optional: if switched, precondition the inputs (can be slow).
   [-a]                 Optional: if provided, this is the estimated upper bound
                        on the number of rows (samples) in the input matrices.
                        Required if -b is provided.
   [-b]                 Optional: if provided, this is the estimated upper bound
                        on the number of columns (predictors) in the input
                        matrix X. Required if -a is provided.
   [-c]                 Optional: if provided, this is the estimated upper bound
                        on the number of environmental factors in the input
                        matrix E. Defaults to 0 if -a and -b are provided and -e
                        is not.
   [-d]                 Optional: if provided, this is the estimated upper bound
                        on the number of dependent variables (columns in Y). If
                        -a and -b are provided, defaults to 1.
    -o  OUTPUT          Path to the output file. Valid formats are .h5, which
                        will have the keys: "betas" (the vector of coefficients),
                        "ypred" (the predicted y values), "R2", the computed
                        coefficient of determination, "adj_R2", the computed
                        adjusted coefficient of determination, "f_statistic",
                        the F-statistic (where the null model is just an
                        intercept when one is included in the model, or where
                        the null model is one with no terms in the case when
                        there is no intercept in the model), and "f_p_value" for
                        the corresponding p-value. Alternatively, .Rdata where
                        the result will be a named list with the same keys as in
                        .h5 but as names.
    -h                  Print this help.
EOF
}

convert_to_valid_format() {
    echo $1;
}

KEEP_TMP=false
SLOW=false
num_depvars_bound=1
num_interxns_bound=0

OPTIND=1
while getopts "h?x:e:y:o:a:b:c:d:intqrspg" opt; do
    case "$opt" in
    h|\?)
        show_help
        exit 0
        ;;
    x)
        x_path=$OPTARG
        ;;
    e)
        FLAGS="$FLAGS -e $OPTARG"
        ;;
    y)
        y_path=$OPTARG
        ;;
    i)
        FLAGS="$FLAGS --intercept"
        ;;
    n)
        FLAGS="$FLAGS --interaction"
        ;;
    k)
        KEEP_TMP=true
        ;;
    t)
        FLAGS="$FLAGS --environment"
        ;;
    q)
        FLAGS="$FLAGS -qx"
        ;;
    r)
        FLAGS="$FLAGS -qe"
        ;;
    s)
        FLAGS="$FLAGS -qi"
        ;;
    p)
        FLAGS="$FLAGS -p"
        ;;
    o)
        output_path=$OPTARG
        ;;
    g)
        SLOW=true
        ;;
    a)
        echo num samples set
        num_samples_bound=$OPTARG
        ;;
    b)
        num_predictors_bound=$OPTARG
        ;;
    c)
        num_interxns_bound=$OPTARG
        ;;
    d)
        num_depvars_bound=$OPTARG
        ;;
    esac
done
if [ $OPTIND -eq 1 ]; then
    show_help
    exit 0
fi

echo "[MESSAGE] Path to X matrix: $x_path"
echo "[MESSAGE] Path to Y matrix: $y_path"
echo "[MESSAGE] Path to output file: $output_path"

x_path=$(convert_to_valid_format $x_path)
y_path=$(convert_to_valid_format $y_path)

echo $num_samples_bound $num_depvars_bound
# fallback to old heuristic
if [ -z ${num_samples_bound+x} ]; then
    echo "[MESSAGE] Getting size of X to estimate memory requirements..."
    x_size=$(wc -c < $x_path)
    echo "[MESSAGE] Size of X on disk: $x_size"
    echo "[MESSAGE] Assuming compression ratio of 160x"
    mem_req=$((x_size*160/1024/1024+5*1024)) # pad our estimate
    if (( mem_req > 650000 )); then
        echo "[WARNING] Data may be too large to fit in memory, but will try anyway"
    fi
# if bounds are given on matrix sizes, use them to approximate memory needs
else
    x_col_size=$((num_predictors_bound*(num_interxns_bound+1)+1))
    x_size=$((num_samples_bound*x_col_size))
    y_size=$((num_samples_bound*num_depvars_bound))
    echo "[MESSAGE] Approximate columns of Xhat = [X X*E E]: $x_col_size"
    echo "[MESSAGE] Approximate size of Xhat = [X X*E E]: $x_size"
    echo "[MESSAGE] Approximate size of Y: $y_size"
    a_size=$((x_col_size*x_col_size))
    b_size=$((num_samples_bound*num_depvars_bound))
    # size(X) + size(Y) + size(A) + size(B)
    mem_req_els=$((x_size + y_size + a_size + b_size))
    # (size in MB) + (constant overhead in MB)
    mem_req=$((mem_req_els*8/1024/1024+4000))
fi
mem_req_gb=$((mem_req/1024))
echo "[MESSAGE] Estimated memory requirement: ${mem_req_gb}G"

echo $SLOW
if [ "$SLOW" = false ]; then
    echo "[MESSAGE] Computing A and b..."
    Ab_tmp_path=`mktemp --suffix=Ab.h5`
    gpu_guess_path=`mktemp --suffix=.gpuguess`
    cmd="python3 $GPULS_PY_PATH \
         -X $x_path -y $y_path $FLAGS --compute-Ab -o $Ab_tmp_path -g $gpu_guess_path"
    # echo $cmd
    jobid=`sbatch --nodelist=$NODENAME -c 12 --mem=${mem_req}M --wrap="$cmd" | awk '{print $4}'`
    echo "[MESSAGE] First step Slurm job ID: $jobid"

    used_gpus=$(squeue -h -t R -O gres | awk -F':' '{s+=$2} END {print s}')
    avail_gpus=$((8-used_gpus))
    required_gpus=`srun --dependency=afterok:$jobid --nodelist=$NODENAME --mem=1G cat $gpu_guess_path`

    if (( required_gpus > 8 )); then
        echo " [ERROR]  Not enough GPUs exist to perform this job ever! Try a smaller input matrix."
        exit 3
    fi
    echo "[MESSAGE] $avail_gpus / 8 GPUs are available, need $required_gpus for LS computation"
    if (( required_gpus > avail_gpus )); then
        echo "[WARNING] May take a while for enough GPUs to become available"
    fi

    echo "[MESSAGE] Computing least-squares solution using conjugate gradient..."
    jobid=`sbatch --nodelist=$NODENAME -c 12 --gres=gpu:${required_gpus} \
           --mem=${mem_req}M --wrap="python3 $GPULS_PY_PATH \
           -X $x_path -y $y_path -Ab $Ab_tmp_path $FLAGS --compute-ls -o \
           ${output_path}.h5" | awk '{print $4}'`
    srun --dependency=afterok:$jobid --nodelist=$NODENAME -c 12 --mem=${mem_req}M \
        hdf52rdata ${output_path}.h5 ${output_path}
    if [ "$KEEP_TMP" = true ]; then
        echo "[MESSAGE] Keeping temporary file at $Ab_tmp_path"
    else
        echo "[MESSAGE] Clearing temporary files..."
        srun --nodelist=$NODENAME -c 1 --mem=1G rm $Ab_tmp_path
    fi

    echo "[MESSAGE] Done!"
else
    echo "[MESSAGE] Computing matrix inverse solution..."
    echo "[WARNING] This can be pretty slow..."
    srun -c 12 --nodelist=$NODENAME --mem=${mem_req}M python3 \
        $GPULS_PY_PATH -X $x_path -y $y_path $FLAGS \
        --compute-slow -o ${output_path}.h5
    srun -c 12 --nodelist=$NODENAME --mem=${mem_req}M hdf52rdata ${output_path}.h5 ${output_path}
fi

